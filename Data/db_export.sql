-- MySQL Script generated by MySQL Workbench
-- Sat Jun 13 18:20:20 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema tdt
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema tdt
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `tdt` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `tdt` ;

-- -----------------------------------------------------
-- Table `tdt`.`categories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`categories` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `CategoryName` VARCHAR(100) NULL DEFAULT NULL,
  `HighLevelCategory` TINYINT(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 57
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`districts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`districts` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 99
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`funders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`funders` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` LONGTEXT NOT NULL,
  `Address1` LONGTEXT NULL DEFAULT NULL,
  `Address2` LONGTEXT NULL DEFAULT NULL,
  `Address3` LONGTEXT NULL DEFAULT NULL,
  `Town` LONGTEXT NULL DEFAULT NULL,
  `County` LONGTEXT NULL DEFAULT NULL,
  `PostCode` LONGTEXT NULL DEFAULT NULL,
  `Tel` LONGTEXT NULL DEFAULT NULL,
  `MainContact` LONGTEXT NOT NULL,
  `Amount` DECIMAL(19,4) NULL DEFAULT '0.0000',
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 31
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`ngos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`ngos` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 138
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`otherbodies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`otherbodies` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 6
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectDocs_temp`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectDocs_temp` (
  `Id` INT(11) NULL DEFAULT NULL,
  `Project_Id` INT(11) NULL DEFAULT NULL,
  `DocName` TEXT NULL DEFAULT NULL,
  `FilePath` TEXT NULL DEFAULT NULL,
  `Description` TEXT NULL DEFAULT NULL,
  `DocCategory` TEXT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `tdt`.`projectofficers`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectofficers` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `FirstName` LONGTEXT NOT NULL,
  `LastName` LONGTEXT NOT NULL,
  `Tel` LONGTEXT NULL DEFAULT NULL,
  `Mobile` LONGTEXT NULL DEFAULT NULL,
  `Email` LONGTEXT NULL DEFAULT NULL,
  `Address1` LONGTEXT NULL DEFAULT NULL,
  `Address2` LONGTEXT NULL DEFAULT NULL,
  `Address3` LONGTEXT NULL DEFAULT NULL,
  `Town` LONGTEXT NULL DEFAULT NULL,
  `County` LONGTEXT NULL DEFAULT NULL,
  `PostCode` LONGTEXT NULL DEFAULT NULL,
  `Image` LONGBLOB NULL DEFAULT NULL,
  `Info` LONGTEXT NULL DEFAULT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 1022
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectstatuscodes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectstatuscodes` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `StatusCode` LONGTEXT NOT NULL,
  `Description` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 29
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`regions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`regions` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Name` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 35
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projects` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `ProjectIdentifier` LONGTEXT NOT NULL,
  `ProjectName` LONGTEXT NOT NULL,
  `ApplicationDate` DATETIME NULL DEFAULT NULL,
  `AmountGrantRequested` BIGINT(20) NULL DEFAULT NULL,
  `AmountGrantApproved` BIGINT(20) NULL DEFAULT NULL,
  `DateGrantApproved` DATETIME NULL DEFAULT NULL,
  `AmountGrantPaid` BIGINT(20) NULL DEFAULT NULL,
  `DateGrantPaid` DATETIME NULL DEFAULT NULL,
  `ProjectDescription` LONGTEXT NULL DEFAULT NULL,
  `StatusCode_Id` INT(11) NOT NULL,
  `StatusDescription` LONGTEXT NULL DEFAULT NULL,
  `ProjOfficerRecommendation` LONGTEXT NULL DEFAULT NULL,
  `TargetCompletionDate` DATETIME NULL DEFAULT NULL,
  `Region_Id` INT(11) NOT NULL,
  `District_Id` INT(11) NULL DEFAULT NULL,
  `Keywords` LONGTEXT NULL DEFAULT NULL,
  `Summary` LONGTEXT NULL DEFAULT NULL,
  `ProjOfficer_Id` INT(11) NULL DEFAULT NULL,
  `Problems` LONGTEXT NULL DEFAULT NULL,
  `StatusCodeDate` DATE NULL DEFAULT NULL,
  `StrengthsWeaknesses` LONGTEXT NULL DEFAULT NULL,
  `FinanceOtherFunders` LONGTEXT NULL DEFAULT NULL,
  `LocalContribution` LONGTEXT NULL DEFAULT NULL,
  `WebSitePicture` LONGBLOB NULL DEFAULT NULL,
  `WebSitePictureDescription` LONGTEXT NULL DEFAULT NULL,
  `Latitude` DECIMAL(18,12) NULL DEFAULT NULL,
  `Longitude` DECIMAL(18,12) NULL DEFAULT NULL,
  `DocumentsUrl` LONGTEXT NULL DEFAULT NULL,
  `PublicDocumentsUrl` LONGTEXT NULL DEFAULT NULL,
  `ImpactOfProject` LONGTEXT NULL DEFAULT NULL,
  `LastUpdated` DATETIME NULL DEFAULT NULL,
  `TotalProjectCost` DECIMAL(19,4) NULL DEFAULT NULL,
  `LastUpdatedBy` VARCHAR(50) NULL DEFAULT NULL,
  `AmountGrantRecommended` BIGINT(20) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_DistrictsProjects` (`District_Id` ASC) VISIBLE,
  INDEX `FK_ProjectOfficersProjects` (`ProjOfficer_Id` ASC) VISIBLE,
  INDEX `FK_ProjectStatusCodesProjects` (`StatusCode_Id` ASC) VISIBLE,
  INDEX `FK_RegionsProjects` (`Region_Id` ASC) VISIBLE,
  CONSTRAINT `FK_DistrictsProjects`
    FOREIGN KEY (`District_Id`)
    REFERENCES `tdt`.`districts` (`Id`),
  CONSTRAINT `FK_ProjectOfficersProjects`
    FOREIGN KEY (`ProjOfficer_Id`)
    REFERENCES `tdt`.`projectofficers` (`Id`),
  CONSTRAINT `FK_ProjectStatusCodesProjects`
    FOREIGN KEY (`StatusCode_Id`)
    REFERENCES `tdt`.`projectstatuscodes` (`Id`),
  CONSTRAINT `FK_RegionsProjects`
    FOREIGN KEY (`Region_Id`)
    REFERENCES `tdt`.`regions` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 1631
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectcategories`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectcategories` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `Category_Id` INT(11) NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_ProjectCategories_Projects` (`Project_Id` ASC) VISIBLE,
  INDEX `FK_ProjectCategories_Categories` (`Category_Id` ASC) VISIBLE,
  CONSTRAINT `FK_ProjectCategories_Categories`
    FOREIGN KEY (`Category_Id`)
    REFERENCES `tdt`.`categories` (`Id`),
  CONSTRAINT `FK_ProjectCategories_Projects`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 26
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectdocs`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectdocs` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `DocName` LONGTEXT NOT NULL,
  `FilePath` LONGTEXT NOT NULL,
  `Description` LONGTEXT NULL DEFAULT NULL,
  `DocCategory` LONGTEXT NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_ProjectsProjectDocs` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_ProjectsProjectDocs`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 2017
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectfunders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectfunders` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `Funder_Id` INT(11) NOT NULL,
  `AmountFunded` DECIMAL(19,4) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_FunderProjectFunders` (`Funder_Id` ASC) VISIBLE,
  INDEX `FK_ProjectProjectFunders` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_FunderProjectFunders`
    FOREIGN KEY (`Funder_Id`)
    REFERENCES `tdt`.`funders` (`Id`),
  CONSTRAINT `FK_ProjectProjectFunders`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 50
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectngos`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectngos` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `NGO_Id` INT(11) NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_NGOProjectNGOs` (`NGO_Id` ASC) VISIBLE,
  INDEX `FK_ProjectProjectNGOs` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_NGOProjectNGOs`
    FOREIGN KEY (`NGO_Id`)
    REFERENCES `tdt`.`ngos` (`Id`),
  CONSTRAINT `FK_ProjectProjectNGOs`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 168
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projectotherbodies`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projectotherbodies` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `OtherBody_Id` INT(11) NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_OtherBodyProjectOtherBodies` (`OtherBody_Id` ASC) VISIBLE,
  INDEX `FK_ProjectProjectOtherBodies` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_OtherBodyProjectOtherBodies`
    FOREIGN KEY (`OtherBody_Id`)
    REFERENCES `tdt`.`otherbodies` (`Id`),
  CONSTRAINT `FK_ProjectProjectOtherBodies`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 7
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`projects_temp`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`projects_temp` (
  `Id` INT(11) NULL DEFAULT NULL,
  `ProjectIdentifier` TEXT NULL DEFAULT NULL,
  `ProjectName` TEXT NULL DEFAULT NULL,
  `ApplicationDate` TEXT NULL DEFAULT NULL,
  `AmountGrantRequested` INT(11) NULL DEFAULT NULL,
  `AmountGrantApproved` INT(11) NULL DEFAULT NULL,
  `DateGrantApproved` TEXT NULL DEFAULT NULL,
  `AmountGrantPaid` INT(11) NULL DEFAULT NULL,
  `DateGrantPaid` TEXT NULL DEFAULT NULL,
  `ProjectDescription` TEXT NULL DEFAULT NULL,
  `StatusCode_Id` INT(11) NULL DEFAULT NULL,
  `StatusDescription` TEXT NULL DEFAULT NULL,
  `ProjOfficerRecommendation` TEXT NULL DEFAULT NULL,
  `TargetCompletionDate` TEXT NULL DEFAULT NULL,
  `Region_Id` INT(11) NULL DEFAULT NULL,
  `District_Id` INT(11) NULL DEFAULT NULL,
  `Keywords` TEXT NULL DEFAULT NULL,
  `Summary` TEXT NULL DEFAULT NULL,
  `ProjOfficer_Id` INT(11) NULL DEFAULT NULL,
  `Problems` TEXT NULL DEFAULT NULL,
  `StatusCodeDate` TEXT NULL DEFAULT NULL,
  `StrengthsWeaknesses` TEXT NULL DEFAULT NULL,
  `FinanceOtherFunders` TEXT NULL DEFAULT NULL,
  `LocalContribution` TEXT NULL DEFAULT NULL,
  `WebSitePicture` TEXT NULL DEFAULT NULL,
  `WebSitePictureDescription` TEXT NULL DEFAULT NULL,
  `Latitude` TEXT NULL DEFAULT NULL,
  `Longitude` TEXT NULL DEFAULT NULL,
  `DocumentsUrl` TEXT NULL DEFAULT NULL,
  `PublicDocumentsUrl` TEXT NULL DEFAULT NULL,
  `ImpactOfProject` TEXT NULL DEFAULT NULL,
  `LastUpdated` TEXT NULL DEFAULT NULL,
  `TotalProjectCost` TEXT NULL DEFAULT NULL,
  `LastUpdatedBy` TEXT NULL DEFAULT NULL)
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `tdt`.`purchaseditems`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`purchaseditems` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `PurchasedItem` LONGTEXT NOT NULL,
  `DatePurchased` DATETIME NOT NULL,
  `ItemCost` DECIMAL(19,4) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  INDEX `IX_FK_ProjectPurchasedItems` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_ProjectPurchasedItems`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 23
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`relatedprojects`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`relatedprojects` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `RelationshipKey` INT(11) NOT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_ProjectRelatedProject` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_ProjectRelatedProject`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 114
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`users` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Email` VARCHAR(100) NOT NULL,
  `FullName` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 144
DEFAULT CHARACTER SET = utf8;


-- -----------------------------------------------------
-- Table `tdt`.`visitdates`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `tdt`.`visitdates` (
  `Id` INT(11) NOT NULL AUTO_INCREMENT,
  `Project_Id` INT(11) NOT NULL,
  `VisitDateStart` DATETIME NOT NULL,
  `VisitDateEnd` DATETIME NOT NULL,
  `Visitor` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`Id`),
  INDEX `FK_ProjectVisitDates` (`Project_Id` ASC) VISIBLE,
  CONSTRAINT `FK_ProjectVisitDates`
    FOREIGN KEY (`Project_Id`)
    REFERENCES `tdt`.`projects` (`Id`))
ENGINE = InnoDB
AUTO_INCREMENT = 156
DEFAULT CHARACTER SET = utf8;

USE `tdt` ;

-- -----------------------------------------------------
-- procedure usp_AddCategoryToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddCategoryToProject`(inProjectId int, inCategoryId int)
BEGIN
INSERT INTO `tdt`.`projectcategories`
(`Project_Id`,
`Category_Id`)
VALUES
(inProjectId,
inCategoryId);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddDocumentToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddDocumentToProject`(inProjectId int, inDocName nvarchar(255), inFilePath nvarchar(255))
BEGIN
INSERT INTO `tdt`.`projectdocs`
(`Project_Id`,
`DocName`,
`FilePath`)
VALUES
(inProjectId,
inDocName,
inFilePath);



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddFunderToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddFunderToProject`(inProjectId int, inFunderId int, inAmountFunded decimal)
BEGIN
INSERT INTO `tdt`.`projectfunders`
(`Project_Id`,
`Funder_Id`,
`AmountFunded`)
VALUES
(inProjectId,
inFunderId,
inAmountFunded);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddNGOToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddNGOToProject`(inProjectId int, inNGOId int)
BEGIN
INSERT INTO `tdt`.`projectngos`
(`Project_Id`,
`NGO_Id`)
VALUES
(inProjectId,
inNGOId);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddOtherBodyToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddOtherBodyToProject`(inProjectId int, inOtherBodyId int)
BEGIN
INSERT INTO `tdt`.`projectotherbodies`
(`Project_Id`,
`OtherBody_Id`)
VALUES
(inProjectId,
inOtherBodyId);




END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddPurchasedItemToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddPurchasedItemToProject`(inProjectId int,
                                                                inPurchasedItem longtext,
																inDatePurchased datetime,
																inItemCost decimal)
BEGIN

	INSERT INTO `tdt`.`purchaseditems`
		(`Project_Id`,
		`PurchasedItem`,
		`DatePurchased`,
		`ItemCost`)
		VALUES
		(inProjectId,
		inPurchasedItem,
		inDatePurchased,
		inItemCost);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddRelatedProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddRelatedProject`(inProjectId int, inRelationshipKey int)
BEGIN
INSERT INTO `tdt`.`relatedprojects`
(`Project_Id`,
`RelationshipKey`)
VALUES
(inProjectId,
inRelationshipKey);


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_AddVisitToProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_AddVisitToProject`(inProjectId int, inVisitDateStart datetime, inVisitDateEnd datetime, inVisitor varchar(100))
BEGIN
INSERT INTO `tdt`.`visitdates`
(`Project_Id`,
`VisitDateStart`,
`VisitDateEnd`,
`Visitor`)
VALUES
(inProjectId,
inVisitDateStart,
inVisitDateEnd,
inVisitor);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteCategory
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteCategory`(categoryId int)
BEGIN
DELETE FROM `tdt`.`categories`
WHERE `categories`.`Id` = categoryId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteDistrict
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteDistrict`(districtId int)
BEGIN
DELETE FROM `tdt`.`districts`
WHERE `districts`.`Id` = districtId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteFunder
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteFunder`(funderId int)
BEGIN
DELETE FROM `tdt`.`funders`
WHERE `funders`.`Id` = funderId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteNGO
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteNGO`(ngoId int)
BEGIN
DELETE FROM `tdt`.`ngos`
WHERE `ngos`.`Id` = ngoId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteOtherBody
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteOtherBody`(otherBodyId int)
BEGIN
DELETE FROM `tdt`.`otherbodies`
WHERE `otherbodies`.`Id` = otherBodyId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteProject`(inId int)
BEGIN

    DELETE FROM projectcategories where Project_Id = inId;
    DELETE FROM projectdocs where Project_Id = inId;
    DELETE FROM projectfunders where Project_Id = inId;
    DELETE FROM projectngos where Project_Id = inId;
    DELETE FROM projectotherbodies where Project_Id = inId;
    DELETE FROM purchaseditems where Project_Id = inId;
    DELETE FROM relatedprojects where Project_Id = inId;
    DELETE FROM visitdates where Project_Id = inId;
    DELETE FROM projects WHERE Id = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteProjectOfficer
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteProjectOfficer`(projectOfficerId int)
BEGIN
DELETE FROM `tdt`.`projectofficers`
WHERE `projectofficers`.`Id` = projectOfficerId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteRegion
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteRegion`(regionId int)
BEGIN
DELETE FROM `tdt`.`regions`
WHERE `regions`.`Id` = regionId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_DeleteStatusCode
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_DeleteStatusCode`(statusCodeId int)
BEGIN
DELETE FROM `tdt`.`projectstatuscodes`
WHERE `projectstatuscodes`.`Id` = statusCodeId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllCategories
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllCategories`()
BEGIN
SELECT `categories`.`Id`,
    `categories`.`CategoryName`,
    `categories`.`HighLevelCategory`
FROM `tdt`.`categories`;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllDistricts
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllDistricts`()
BEGIN
SELECT `districts`.`Id`,
    `districts`.`Name`
FROM `tdt`.`districts`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllFunders
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllFunders`()
BEGIN
SELECT `funders`.`Id`,
    `funders`.`Name`,
    `funders`.`Address1`,
    `funders`.`Address2`,
    `funders`.`Address3`,
    `funders`.`Town`,
    `funders`.`County`,
    `funders`.`PostCode`,
    `funders`.`Tel`,
    `funders`.`MainContact`,
    `funders`.`Amount`
FROM `tdt`.`funders`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllNGOs
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllNGOs`()
BEGIN
SELECT `ngos`.`Id`,
    `ngos`.`Name`
FROM `tdt`.`ngos`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllOtherBodies
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllOtherBodies`()
BEGIN
SELECT `otherbodies`.`Id`,
    `otherbodies`.`Name`
FROM `tdt`.`otherbodies`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllProjectOfficers
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllProjectOfficers`()
BEGIN
SELECT `projectofficers`.`Id`,
    `projectofficers`.`FirstName`,
    `projectofficers`.`LastName`,
    `projectofficers`.`Tel`,
    `projectofficers`.`Mobile`,
    `projectofficers`.`Email`,
    `projectofficers`.`Address1`,
    `projectofficers`.`Address2`,
    `projectofficers`.`Address3`,
    `projectofficers`.`Town`,
    `projectofficers`.`County`,
    `projectofficers`.`PostCode`,
    `projectofficers`.`Info`,
    concat(`projectofficers`.`FirstName`, ' ', `projectofficers`.`LastName`) as FullName
FROM `tdt`.`projectofficers`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllProjectStatusCodes
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllProjectStatusCodes`()
BEGIN
SELECT `projectstatuscodes`.`Id`,
    `projectstatuscodes`.`StatusCode`,
    `projectstatuscodes`.`Description`
FROM `tdt`.`projectstatuscodes`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllProjects
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllProjects`()
BEGIN

SELECT `projects`.`Id`,
    `projects`.`ProjectIdentifier`,
    `projects`.`ProjectName`,
    `projects`.`ApplicationDate`,
    `projects`.`AmountGrantRequested`,
    `projects`.`AmountGrantApproved`,
    `projects`.`AmountGrantRecommended`,
    `projects`.`DateGrantApproved`,
    `projects`.`AmountGrantPaid`,
    `projects`.`DateGrantPaid`,
    `projects`.`ProjectDescription`,
    `projects`.`StatusCode_Id`,
    `projects`.`StatusDescription`,
    `projects`.`ProjOfficerRecommendation`,
    `projects`.`TargetCompletionDate`,
    `projects`.`Region_Id`,
    `projects`.`District_Id`,
    `projects`.`Keywords`,
    `projects`.`Summary`,
    `projects`.`ProjOfficer_Id`,
    `projects`.`Problems`,
    `projects`.`StatusCodeDate`,
    `projects`.`StrengthsWeaknesses`,
    `projects`.`FinanceOtherFunders`,
    `projects`.`LocalContribution`,
    `projects`.`WebSitePicture`,
    `projects`.`WebSitePictureDescription`,
    `projects`.`Latitude`,
    `projects`.`Longitude`,
    `projects`.`DocumentsUrl`,
    `projects`.`PublicDocumentsUrl`,
    `projects`.`ImpactOfProject`,
    `projects`.`LastUpdated`,
    `projects`.`TotalProjectCost`,
    `projects`.`LastUpdatedBy`
FROM `tdt`.`projects`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetAllRegions
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetAllRegions`()
BEGIN
SELECT `regions`.`Id`,
    `regions`.`Name`
FROM `tdt`.`regions`;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetCategoriesForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetCategoriesForProject`(inProjectId int)
BEGIN

SELECT p.`Id`,
   p.`Project_Id`,
    p.`Category_Id`,
    c.`CategoryName`
FROM `tdt`.`projectcategories` p, `tdt`.`categories` c
WHERE p.Category_Id = c.Id
  AND p.Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetCategory
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetCategory`(categoryId int)
BEGIN
SELECT `categories`.`Id`,
    `categories`.`CategoryName`,
    `categories`.`HighLevelCategory`
FROM `tdt`.`categories`
WHERE `categories`.`Id` = categoryId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetDistrict
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetDistrict`(districtId int)
BEGIN
SELECT `districts`.`Id`,
    `districts`.`Name`
FROM `tdt`.`districts`
WHERE `districts`.`Id` = districtId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetDocsForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetDocsForProject`(inProjectId int)
BEGIN

SELECT `projectdocs`.`Id`,
    `projectdocs`.`Project_Id`,
    `projectdocs`.`DocName`,
    `projectdocs`.`FilePath`,
    `projectdocs`.`Description`,
    `projectdocs`.`DocCategory`
FROM `tdt`.`projectdocs`
WHERE Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetFunder
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetFunder`(funderId int)
BEGIN
SELECT `funders`.`Id`,
    `funders`.`Name`,
    `funders`.`Address1`,
    `funders`.`Address2`,
    `funders`.`Address3`,
    `funders`.`Town`,
    `funders`.`County`,
    `funders`.`PostCode`,
    `funders`.`Tel`,
    `funders`.`MainContact`,
    `funders`.`Amount`
FROM `tdt`.`funders`
WHERE `funders`.`Id` = funderId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetFundersForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetFundersForProject`(inProjectId int)
BEGIN

SELECT p.`Id`,
    p.`Project_Id`,
    p.`Funder_Id`,
    p.`AmountFunded`,
    f.Name
FROM `tdt`.`projectfunders` p, `tdt`.`funders` f
WHERE p.Funder_Id = f.Id
  AND p.Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetNGO
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetNGO`(ngoId int)
BEGIN
SELECT `ngos`.`Id`,
    `ngos`.`Name`
FROM `tdt`.`ngos`
WHERE `ngos`.`Id` = ngoId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetNGOsForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetNGOsForProject`(inProjectId int)
BEGIN

SELECT p.`Id`,
    p.`Project_Id`,
    p.`NGO_Id`,
    n.`Name`
FROM `tdt`.`projectngos` p, `tdt`.`ngos` n
WHERE p.NGO_Id = n.Id
  AND p.Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetOtherBodiesForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetOtherBodiesForProject`(inProjectId int)
BEGIN

SELECT r.`Id`,
    r.`Project_Id`,
    r.`OtherBody_Id`,
    o.`Name`
FROM `tdt`.`projectotherbodies` r, `tdt`.`otherbodies` o
WHERE r.OtherBody_Id = o.Id
  AND r.Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetOtherBody
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetOtherBody`(otherBodyId int)
BEGIN
SELECT `otherbodies`.`Id`,
    `otherbodies`.`Name`
FROM `tdt`.`otherbodies`
WHERE `otherbodies`.`Id` = otherBodyId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetProject`(inId int)
BEGIN

SELECT `projects`.`Id`,
    `projects`.`ProjectIdentifier`,
    `projects`.`ProjectName`,
    `projects`.`ApplicationDate`,
    `projects`.`AmountGrantRequested`,
    `projects`.`AmountGrantApproved`,
    `projects`.`AmountGrantRecommended`,
    `projects`.`DateGrantApproved`,
    `projects`.`AmountGrantPaid`,
    `projects`.`DateGrantPaid`,
    `projects`.`ProjectDescription`,
    `projects`.`StatusCode_Id`,
    `projects`.`StatusDescription`,
    `projects`.`ProjOfficerRecommendation`,
    `projects`.`TargetCompletionDate`,
    `projects`.`Region_Id`,
    `projects`.`District_Id`,
    `projects`.`Keywords`,
    `projects`.`Summary`,
    `projects`.`ProjOfficer_Id`,
    `projects`.`Problems`,
    `projects`.`StatusCodeDate`,
    `projects`.`StrengthsWeaknesses`,
    `projects`.`FinanceOtherFunders`,
    `projects`.`LocalContribution`,
    `projects`.`WebSitePicture`,
    `projects`.`WebSitePictureDescription`,
    `projects`.`Latitude`,
    `projects`.`Longitude`,
    `projects`.`DocumentsUrl`,
    `projects`.`PublicDocumentsUrl`,
    `projects`.`ImpactOfProject`,
    `projects`.`LastUpdated`,
    `projects`.`TotalProjectCost`,
    `projects`.`LastUpdatedBy`
FROM `tdt`.`projects`
WHERE `projects`.`Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetProjectOfficer
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetProjectOfficer`(projectOfficerId int)
BEGIN
SELECT `projectofficers`.`Id`,
    `projectofficers`.`FirstName`,
    `projectofficers`.`LastName`,
    `projectofficers`.`Tel`,
    `projectofficers`.`Mobile`,
    `projectofficers`.`Email`,
    `projectofficers`.`Address1`,
    `projectofficers`.`Address2`,
    `projectofficers`.`Address3`,
    `projectofficers`.`Town`,
    `projectofficers`.`County`,
    `projectofficers`.`PostCode`,
    `projectofficers`.`Info`
FROM `tdt`.`projectofficers`
WHERE `projectofficers`.`Id` = projectOfficerId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetPurchasedItemsForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetPurchasedItemsForProject`(inProjectId int)
BEGIN

SELECT `purchaseditems`.`Id`,
    `purchaseditems`.`Project_Id`,
    `purchaseditems`.`PurchasedItem`,
    `purchaseditems`.`DatePurchased`,
    `purchaseditems`.`ItemCost`
FROM `tdt`.`purchaseditems`
WHERE Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetRegion
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetRegion`(regionId int)
BEGIN
SELECT `regions`.`Id`,
    `regions`.`Name`
FROM `tdt`.`regions`
WHERE `regions`.`Id` = regionId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetRelatedProjects
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetRelatedProjects`(inProjectId int)
BEGIN

SELECT r.`Id`,
    r.`Project_Id`,
    r.`RelationshipKey`,
    p.`ProjectIdentifier`,
    p.`ProjectName`
FROM `tdt`.`relatedprojects` r, `tdt`.`projects` p
WHERE r.RelationshipKey = p.Id
  AND r.Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetStatusCode
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetStatusCode`(statusCodeId int)
BEGIN
SELECT `projectstatuscodes`.`Id`,
    `projectstatuscodes`.`StatusCode`,
    `projectstatuscodes`.`Description`
FROM `tdt`.`projectstatuscodes`
WHERE `projectstatuscodes`.`Id` = statusCodeId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetUser
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetUser`(inEmail varchar(100))
BEGIN
SELECT `users`.`Id`,
    `users`.`Email`,
    `users`.`FullName`
FROM `tdt`.`users`
WHERE `users`.`Email` = inEmail;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_GetVisitsForProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_GetVisitsForProject`(inProjectId int)
BEGIN

SELECT `visitdates`.`Id`,
    `visitdates`.`Project_Id`,
    `visitdates`.`VisitDateStart`,
    `visitdates`.`VisitDateEnd`,
    `visitdates`.`Visitor`
FROM `tdt`.`visitdates`
WHERE Project_Id = inProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertCategory
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertCategory`(inName varchar(100), inHighLevel int)
BEGIN
INSERT INTO `tdt`.`categories`
(`CategoryName`,
`HighLevelCategory`)
VALUES
(inName, inHighLevel);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertDistrict
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertDistrict`(inName longtext)
BEGIN
INSERT INTO `tdt`.`districts`
(`Name`)
VALUES
(inName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertFunder
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertFunder`(inName longtext, 
															   inAddress1 longtext,
															   inAddress2 longtext,
															   inAddress3 longtext,
															   inTown longtext,
															   inCounty longtext,
															   inPostCode longtext,
															   inTel longtext,
															   inMainContact longtext,
															   inAmount decimal)
BEGIN
	INSERT INTO `tdt`.`funders`
	(`Name`,
	`Address1`,
	`Address2`,
	`Address3`,
	`Town`,
	`County`,
	`PostCode`,
	`Tel`,
	`MainContact`,
	`Amount`)
	VALUES
	(inName, 
	inAddress1 ,
	inAddress2,
	inAddress3,
	inTown,
	inCounty,
	inPostCode,
	inTel,
	inMainContact,
	inAmount);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertNGO
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertNGO`(inName longtext)
BEGIN
	INSERT INTO `tdt`.`ngos`
	(`Name`)
	VALUES
	(inName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertOtherBody
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertOtherBody`(inName longtext)
BEGIN
	INSERT INTO `tdt`.`otherbodies`
	(`Name`)
	VALUES
	(inName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertProject`(inProjectIdentifier longtext,
                                                                inProjectName longtext,
                                                                inProjectDescription longtext,
                                                                inApplicationDate datetime,
                                                                inDateGrantApproved datetime,
                                                                inDateGrantPaid datetime,
                                                                inTargetCompletionDate datetime,
                                                                inAmountGrantRequested bigint,
                                                                inAmountGrantApproved bigint,
                                                                inAmountGrantRecommended bigint,
                                                                inAmountGrantPaid bigint,
                                                                inTotalProjectCost decimal(19,4),
                                                                inStatusCode_Id int,
                                                                inStatusCodeDate date,
                                                                inRegion_Id int,
                                                                inDistrict_Id int,
                                                                inProjOfficer_Id int)
BEGIN

	INSERT INTO `tdt`.`projects`
	(`ProjectIdentifier`,
	`ProjectName`,
	`ProjectDescription`,
	`ApplicationDate`,
	`DateGrantApproved`,
	`DateGrantPaid`,
	`TargetCompletionDate`,
	`AmountGrantRequested`,
	`AmountGrantApproved`,
    `AmountGrantRecommended`,
	`AmountGrantPaid`,
    `TotalProjectCost`,
	`StatusCode_Id`,
    `StatusCodeDate`,
	`Region_Id`,
	`District_Id`,
	`ProjOfficer_Id`)
	VALUES
	(inProjectIdentifier,
	inProjectName,
	inProjectDescription,
	inApplicationDate,
	inDateGrantApproved,
	inDateGrantPaid,
	inTargetCompletionDate,
	inAmountGrantRequested,
	inAmountGrantApproved,
	inAmountGrantRecommended,
	inAmountGrantPaid,
	inTotalProjectCost,
	inStatusCode_Id,
	inStatusCodeDate,
	inRegion_Id,
	inDistrict_Id,
	inProjOfficer_Id);

    SELECT last_insert_id();

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertProjectOfficer
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertProjectOfficer`(inFirstName longtext, 
															   inLastName longtext, 
                                                               inTel longtext, 
                                                               inMobile longtext, 
                                                               inEmail longtext, 
															   inAddress1 longtext,
															   inAddress2 longtext,
															   inAddress3 longtext,
															   inTown longtext,
															   inCounty longtext,
															   inPostCode longtext,
                                                               inInfo longtext)
BEGIN
	INSERT INTO `tdt`.`projectofficers`
	(`FirstName`,
	`LastName`,
	`Tel`,
	`Mobile`,
	`Email`,
	`Address1`,
	`Address2`,
	`Address3`,
	`Town`,
	`County`,
	`PostCode`,
	`Info`)
	VALUES
	(inFirstName,
	inLastName,
	inTel,
	inMobile,
	inEmail,
	inAddress1,
	inAddress2,
	inAddress3,
	inTown,
	inCounty,
	inPostCode,
	inInfo);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertRegion
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertRegion`(inName longtext)
BEGIN
INSERT INTO `tdt`.`regions`
(`Name`)
VALUES
(inName);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_InsertStatusCode
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_InsertStatusCode`(inCode longtext, inDescription longtext)
BEGIN
	INSERT INTO `tdt`.`projectstatuscodes`
	(`StatusCode`, `Description`)
	VALUES
	(inCode, inDescription);

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveCategoryFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveCategoryFromProject`(inProjectCategoryId int)
BEGIN

DELETE FROM `tdt`.`projectcategories`
WHERE Id = inProjectCategoryId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveDocumentFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveDocumentFromProject`(inProjectDocsId int)
BEGIN

DELETE FROM `tdt`.`projectdocs`
WHERE Id = inProjectDocsId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveFunderFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveFunderFromProject`(inProjectFundersId int)
BEGIN

DELETE FROM `tdt`.`projectfunders`
WHERE Id = inProjectFundersId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveNGOFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveNGOFromProject`(inProjectNgoId int)
BEGIN

DELETE FROM `tdt`.`projectngos`
WHERE Id = inProjectNgoId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveOtherBodyFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveOtherBodyFromProject`(inProjectOtherBodyId int)
BEGIN

DELETE FROM `tdt`.`projectotherbodies`
WHERE Id = inProjectOtherBodyId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemovePurchasedItemFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemovePurchasedItemFromProject`(inPurchasedItemId int)
BEGIN

DELETE FROM `tdt`.`purchaseditems`
WHERE Id = inPurchasedItemId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveRelatedProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveRelatedProject`(inRelatedProjectId int)
BEGIN

DELETE FROM `tdt`.`relatedprojects`
WHERE Id = inRelatedProjectId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_RemoveVisitFromProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_RemoveVisitFromProject`(inVisitDateId int)
BEGIN

DELETE FROM `tdt`.`visitdates`
WHERE Id = inVisitDateId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_SearchProjects
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_SearchProjects`(inIdentifier varchar(255), inRegionID int, inName nvarchar(255), inNGOId int, Keywords nvarchar(255), inOfficerId int, inStatusCode int, inFunderId int, inCategoryId int, inDistrictId int, inOtherBodyId int)
BEGIN

SELECT `projects`.`Id`,
    `projects`.`ProjectIdentifier`,
    `projects`.`ProjectName`,
    `projects`.`ApplicationDate`,
    `projects`.`AmountGrantRequested`,
    `projects`.`AmountGrantRecommended`,
    `projects`.`AmountGrantApproved`,
    `projects`.`DateGrantApproved`,
    `projects`.`AmountGrantPaid`,
    `projects`.`DateGrantPaid`,
    `projects`.`ProjectDescription`,
    `projects`.`StatusCode_Id`,
    `projects`.`StatusDescription`,
    `projects`.`ProjOfficerRecommendation`,
    `projects`.`TargetCompletionDate`,
    `projects`.`Region_Id`,
    `projects`.`District_Id`,
    `projects`.`Keywords`,
    `projects`.`Summary`,
    `projects`.`ProjOfficer_Id`,
    `projects`.`Problems`,
    `projects`.`StatusCodeDate`,
    `projects`.`StrengthsWeaknesses`,
    `projects`.`FinanceOtherFunders`,
    `projects`.`LocalContribution`,
    `projects`.`WebSitePicture`,
    `projects`.`WebSitePictureDescription`,
    `projects`.`Latitude`,
    `projects`.`Longitude`,
    `projects`.`DocumentsUrl`,
    `projects`.`PublicDocumentsUrl`,
    `projects`.`ImpactOfProject`,
    `projects`.`LastUpdated`,
    `projects`.`TotalProjectCost`,
    `projects`.`LastUpdatedBy`,
    concat(`projectofficers`.`FirstName`, ' ', `projectofficers`.`LastName`) as ProjectOfficerName,
    `regions`.`Name` as RegionName,
    `projectstatuscodes`.`StatusCode`,
    `districts`.`Name` as DistrictName
FROM `tdt`.`projects` INNER JOIN
`tdt`.`projectofficers` ON `tdt`.`projects`.`ProjOfficer_Id` = `tdt`.`projectofficers`.`Id` INNER JOIN
`tdt`.`regions` ON `tdt`.`projects`.`Region_Id` = `tdt`.`regions`.`Id` INNER JOIN
`tdt`.`projectstatuscodes` ON `tdt`.`projects`.`StatusCode_Id` = `tdt`.`projectstatuscodes`.`Id` INNER JOIN
`tdt`.`districts` ON `tdt`.`projects`.`District_Id` = `tdt`.`districts`.`Id`
WHERE (inIdentifier = '' OR `projects`.`ProjectIdentifier` = inIdentifier)
AND (inRegionID = 0 OR `projects`.`Region_Id` = inRegionID)
AND (inName = '' OR `projects`.`ProjectName` = inName)
AND (inNGOId = 0 OR EXISTS (select 1 from projectngos where Project_Id = `projects`.`Id` AND NGO_Id = inNGOId))
AND (Keywords = '' OR `projects`.`Keywords` LIKE CONCAT('%', Keywords, '%')) -- need to look at this behaviour
AND (inOfficerId = 0 OR `projects`.`ProjOfficer_Id` = inOfficerId)
AND (inStatusCode = 0 OR `projects`.`StatusCode_Id` = inStatusCode)
AND (inFunderId = 0 OR EXISTS( select 1 from projectfunders where Project_Id = `projects`.`Id` AND Funder_Id = inFunderId))
AND (inCategoryId = 0 OR EXISTS( select 1 from projectcategories where Project_Id = `projects`.`Id` AND Category_Id = inCategoryId))
AND (inDistrictId = 0 OR `projects`.`District_Id` = inDistrictId)
AND (inOtherBodyId = 0 OR EXISTS( select 1 from projectotherbodies where Project_Id = `projects`.`Id` AND OtherBody_Id = inOtherBodyId));

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateCategory
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateCategory`(inId int, inName varchar(100), inHighLevel int)
BEGIN
UPDATE `tdt`.`categories`
SET
`CategoryName` = inName,
`HighLevelCategory` = inHighLevel
WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateDistrict
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateDistrict`(inId int, inName longtext)
BEGIN
	UPDATE `tdt`.`districts`
	SET
	`Name` = inName
	WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateFunder
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateFunder`(inId int, 
															   inName longtext,
															   inAddress1 longtext,
															   inAddress2 longtext,
															   inAddress3 longtext,
															   inTown longtext,
															   inCounty longtext,
															   inPostCode longtext,
															   inTel longtext,
															   inMainContact longtext,
															   inAmount decimal)
BEGIN
	UPDATE `tdt`.`funders`
	SET
	`Name` = inName,
	`Address1` = inAddress1,
	`Address2` = inAddress2,
	`Address3` = inAddress3,
	`Town` = inTown,
	`County` = inCounty,
	`PostCode` = inPostCode,
	`Tel` = inTel,
	`MainContact` = inMainContact,
	`Amount` = inAmount
	WHERE `Id` = inId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateNGO
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateNGO`(inId int, inName longtext)
BEGIN
	UPDATE `tdt`.`ngos`
	SET
	`Name` = inName
	WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateOtherBody
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateOtherBody`(inId int, inName longtext)
BEGIN
	UPDATE `tdt`.`otherbodies`
	SET
	`Name` = inName
	WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateProject
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateProject`(inId int,
                                                                inProjectIdentifier longtext,
                                                                inProjectName longtext,
                                                                inApplicationDate datetime,
                                                                inAmountGrantRequested bigint,
                                                                inAmountGrantApproved bigint,
                                                                inDateGrantApproved datetime,
                                                                inAmountGrantPaid bigint,
                                                                inDateGrantPaid datetime,
                                                                inProjectDescription longtext,
                                                                inStatusCode_Id int,
                                                                inStatusDescription longtext,
                                                                inProjOfficerRecommendation longtext,
                                                                inTargetCompletionDate datetime,
                                                                inRegion_Id int,
                                                                inDistrict_Id int,
                                                                inKeywords longtext,
                                                                inSummary longtext,
                                                                inProjOfficer_Id int,
                                                                inProblems longtext,
                                                                inStatusCodeDate date,
                                                                inStrengthsWeaknesses longtext,
                                                                inFinanceOtherFunders longtext,
                                                                inLocalContribution longtext,
                                                                inWebSitePicture longblob,
                                                                inWebSitePictureDescription longtext,
                                                                inLatitude decimal(18,12),
                                                                inLongitude decimal(18,12),
                                                                inDocumentsUrl longtext,
																inPublicDocumentsUrl longtext,
                                                                inImpactOfProject longtext,
                                                                inTotalProjectCost decimal(19,4),
                                                                inLastUpdatedBy varchar(50))
BEGIN

	UPDATE `tdt`.`projects`
	SET
	`ProjectIdentifier` =inProjectIdentifier,
	`ProjectName` =inProjectName,
	`ApplicationDate` =inApplicationDate,
	`AmountGrantRequested` =inAmountGrantRequested,
	`AmountGrantApproved` =inAmountGrantApproved,
	`DateGrantApproved` =inDateGrantApproved,
	`AmountGrantPaid` =inAmountGrantPaid,
	`DateGrantPaid` =inDateGrantPaid,
	`ProjectDescription` =inProjectDescription,
	`StatusCode_Id` =inStatusCode_Id,
	`StatusDescription` =inStatusDescription,
	`ProjOfficerRecommendation` =inProjOfficerRecommendation,
	`TargetCompletionDate` =inTargetCompletionDate,
	`Region_Id` =inRegion_Id,
	`District_Id` =inDistrict_Id,
	`Keywords` =inKeywords,
	`Summary` =inSummary,
	`ProjOfficer_Id` =inProjOfficer_Id,
	`Problems` =inProblems,
	`StatusCodeDate` =inStatusCodeDate,
	`StrengthsWeaknesses` =inStrengthsWeaknesses,
	`FinanceOtherFunders` =inFinanceOtherFunders,
	`LocalContribution` =inLocalContribution,
	`WebSitePicture` =inWebSitePicture,
	`WebSitePictureDescription` =inWebSitePictureDescription,
	`Latitude` =inLatitude,
	`Longitude` =inLongitude,
	`DocumentsUrl` =inDocumentsUrl,
	`PublicDocumentsUrl` =inPublicDocumentsUrl,
	`ImpactOfProject` =inImpactOfProject,
	`LastUpdated` = NOW(),
	`TotalProjectCost` =inTotalProjectCost,
	`LastUpdatedBy` =inLastUpdatedBy
	WHERE `Id` =inId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateProjectDetails
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateProjectDetails`(inId int,
                                                                inProjectIdentifier longtext,
                                                                inProjectName longtext,
                                                                inProjectDescription longtext,
                                                                inApplicationDate datetime,
                                                                inDateGrantApproved datetime,
                                                                inDateGrantPaid datetime,
                                                                inTargetCompletionDate datetime,
                                                                inAmountGrantRequested bigint,
                                                                inAmountGrantRecommended bigint,
                                                                inAmountGrantApproved bigint,
                                                                inAmountGrantPaid bigint,
                                                                inTotalProjectCost decimal(19,4),
                                                                inStatusCode_Id int,
                                                                inRegion_Id int,
                                                                inDistrict_Id int,
                                                                inProjOfficer_Id int,
                                                                inLastUpdatedBy varchar(50))
BEGIN

    DECLARE vStatusCodeDate varchar(50);
    
    SELECT CASE WHEN inStatusCode_Id = StatusCode_Id THEN 'Not Changed' ELSE 'Changed' end
    INTO vStatusCodeDate
    FROM projects
    WHERE Id = inId;
    
    SELECT vStatusCodeDate;
    
	UPDATE `tdt`.`projects`
	SET
	`ProjectIdentifier` =inProjectIdentifier,
	`ProjectName` =inProjectName,
	`ProjectDescription` =inProjectDescription,
	`ApplicationDate` =inApplicationDate,
	`DateGrantApproved` =inDateGrantApproved,
	`DateGrantPaid` =inDateGrantPaid,
	`TargetCompletionDate` =inTargetCompletionDate,
	`AmountGrantRequested` =inAmountGrantRequested,
	`AmountGrantRecommended` =inAmountGrantRecommended,
	`AmountGrantApproved` =inAmountGrantApproved,
	`AmountGrantPaid` =inAmountGrantPaid,
	`TotalProjectCost` =inTotalProjectCost,
	`StatusCode_Id` =inStatusCode_Id,
	`Region_Id` =inRegion_Id,
	`District_Id` =inDistrict_Id,
	`ProjOfficer_Id` =inProjOfficer_Id,
	`StatusCodeDate` = CASE WHEN vStatusCodeDate = 'Changed' then NOW() else StatusCodeDate end,
	`LastUpdated` = NOW(),
	`LastUpdatedBy` =inLastUpdatedBy
	WHERE `Id` =inId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateProjectMetadata
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateProjectMetadata`(inId int,
                                                                     inImpact longtext,
                                                                     inWebsitePicture longtext,
                                                                     inCaption longtext,
                                                                     inLatitude longtext,
                                                                     inLongitude longtext,
                                                                     inLastUpdatedBy varchar(50))
BEGIN
    
	UPDATE `tdt`.`projects`
	SET ImpactOfProject = inImpact,
        WebSitePicture = inWebsitePicture,
        WebSitePictureDescription = inCaption,
        Latitude = inLatitude,
        Longitude = inLongitude,
	`LastUpdated` = NOW(),
	`LastUpdatedBy` =inLastUpdatedBy
	WHERE `Id` =inId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateProjectNotes
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateProjectNotes`(inId int,
																inStatusDescription longtext,
                                                                inProjOfficerRecommendation longtext,
                                                                inKeywords longtext,
                                                                inSummary longtext,
                                                                inProblems longtext,
                                                                inStrengthsWeaknesses longtext,
                                                                inFinanceOtherFunders longtext,
                                                                inLocalContribution longtext,
                                                                inLastUpdatedBy varchar(50))
BEGIN
    
	UPDATE `tdt`.`projects`
	SET `StatusDescription` = inStatusDescription,
		`ProjOfficerRecommendation` = inProjOfficerRecommendation,
		`Keywords` = inKeywords,
		`Summary` = inSummary,
		`Problems` = inProblems,
		`StrengthsWeaknesses` =  inStrengthsWeaknesses,
		`FinanceOtherFunders` = inFinanceOtherFunders,
		`LocalContribution` = inLocalContribution,
		`LastUpdatedBy` = inLastUpdatedBy
	WHERE `Id` = inId;


END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateProjectOfficer
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateProjectOfficer`(inId int, 
															   inFirstName longtext,
                                                               inLastName longtext,
															   inTel longtext,
                                                               inMobile longtext,
															   inAddress1 longtext,
															   inAddress2 longtext,
															   inAddress3 longtext,
															   inTown longtext,
															   inCounty longtext,
															   inPostCode longtext,
                                                               inInfo longtext,
                                                               inEmail longtext)
BEGIN
	UPDATE `tdt`.`projectofficers`
		SET
		`FirstName` = inFirstName,
		`LastName` = inLastName,
		`Tel` = inTel,
		`Mobile` = inMobile,
		`Email` = inEmail,
		`Address1` = inAddress1,
		`Address2` = inAddress2,
		`Address3` = inAddress3,
		`Town` = inTown,
		`County` = inCounty,
		`PostCode` = inPostCode,
		`Info` = inInfo
		WHERE `Id` = inId;



END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdatePurchasedItem
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdatePurchasedItem`(inId int,
                                                                inPurchasedItem longtext,
																inDatePurchased datetime,
																inItemCost decimal)
BEGIN

	UPDATE`tdt`.`purchaseditems`
		SET `PurchasedItem` = inPurchasedItem,
		`DatePurchased` = inDatePurchased,
		`ItemCost` = inItemCost
	WHERE Id = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateRegion
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateRegion`(inId int, inName longtext)
BEGIN
	UPDATE `tdt`.`regions`
	SET
	`Name` = inName
	WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateStatusCodes
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateStatusCodes`(inId int, inCode longtext, inDescription longtext)
BEGIN
	UPDATE `tdt`.`projectstatuscodes`
	SET
	`StatusCode` = inCode,
    `Description` = inDescription
	WHERE `Id` = inId;

END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure usp_UpdateVisit
-- -----------------------------------------------------

DELIMITER $$
USE `tdt`$$
CREATE DEFINER=`tdtTestAdmin`@`%` PROCEDURE `usp_UpdateVisit`(inId int, inVisitDateStart datetime, inVisitDateEnd datetime, inVisitor varchar(100))
BEGIN
UPDATE `tdt`.`visitdates`
SET `VisitDateStart` = inVisitDateStart,
`VisitDateEnd` = inVisitDateEnd,
`Visitor` = inVisitor
WHERE Id = inId;

END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
